services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: portfolio-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - PORT=80
      - VITE_API_URL=https://tu-dominio.com/api
    networks:
      - portfolio-network
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: portfolio-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./backend/config/master.key:/rails/config/master.key:ro
      - backend_storage:/rails/storage
      - backend_logs:/rails/log
    environment:
      - RAILS_ENV=production
      - BINDING=0.0.0.0
      - CORS_ORIGINS=https://tu-dominio.com
      - DATABASE_URL=postgresql://portfolio_user:portfolio_pass@postgres:5432/portfolio_production
      - RAILS_MASTER_KEY_FILE=/rails/config/master.key
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    networks:
      - portfolio-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:17
    container_name: portfolio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: portfolio_production
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    networks:
      - portfolio-network
    depends_on:
      - frontend
      - backend

  certbot:
    image: certbot/certbot
    container_name: portfolio-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
    command: certonly --webroot --webroot-path=/var/www/certbot --email tu-email@ejemplo.com --agree-tos --no-eff-email -d tu-dominio.com

networks:
  portfolio-network:
    driver: bridge

volumes:
  postgres_data:
    name: portfolio_postgres_data_prod
  backend_storage:
    name: portfolio_backend_storage_prod
  backend_logs:
    name: portfolio_backend_logs_prod
